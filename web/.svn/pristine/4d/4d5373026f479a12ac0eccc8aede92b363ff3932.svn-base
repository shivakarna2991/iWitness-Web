<?php

/**
 * Adds prefix and suffix to given value if not empty,
 * otherwise returns empty string
 *
 * @param string $prefix
 * @param $value
 * @param string $suffix
 * @return type
 */
function iwitness_view_helper_decorate($prefix, $value, $suffix = '')
{
    if ('' !== (string)$value) {
        return $prefix . $value . $suffix;
    }
    return '';
}


/**
 * Formats phone number from normalized international form to human-friendly
 *
 * Normalized form example: 17525856424 (without +)
 * Human-friendly example
 *     for US: 752-585-6424
 *     for other countries: +1-752-585-6424
 *
 * @param string $phone
 * @return mixed|string
 */
function iwitness_view_helper_format_phone($phone)
{
    if (strlen($phone) < 10) {
        return $phone;
    }

    // make sure that valid int'l phone number
    $phone = iwitness_view_helper_format_intl_phone($phone);
    $length = strlen($phone);
    if ($length <= 0) {
        return '';
    }

    $human = substr($phone, $length - 10, 3) . '-'
        . substr($phone, $length - 7, 3) . '-'
        . substr($phone, $length - 4);

    if ('1' === $phone[0] && $length <= 11) {
        return $human; // US
    }

    return '+' . substr($phone, 0, $length - 10) . '-' . $human;
}

/**
 * Transforms phone number from human-friendly format to international format
 *
 * @param string $phone
 * @return mixed|string
 */
function iwitness_view_helper_format_intl_phone($phone)
{
    $norm = preg_replace('~[^0-9]~', '', $phone);

    if (10 === strlen($norm)) {
        return '1' . $norm; // US
    }

    return $norm;
}

/**
 * Adds prefix and suffix to given value if not empty,
 * otherwise returns empty string
 *
 * @param $count
 * @param $singular
 * @param null $plural
 * @return type
 */
function iwitness_view_helper_pluralize($count, $singular, $plural = null)
{
    if (null === $plural) {
        $plural = $singular . 's';
    }
    return intval($count) == 1 ? $singular : $plural;
}

/**
 * @param array $options
 * @param $selected
 */
function iwitness_view_helper_select_options($selected, array $options)
{
    foreach ($options as $key => $value) {
        if ($key == $selected && ($selected != null)) {
            echo '<option selected="selected" value="' . sanitize_text_field($key) . '">' . sanitize_text_field($value) . '</option>';
        } else {
            echo '<option  value="' . sanitize_text_field($key) . '">' . sanitize_text_field($value) . '</option>';
        }
    }
}


/**
 * @param $value
 * @return bool|string
 */
function iwitness_view_helper_format_date($value)
{
    try {
        $result = $value ? date("m/d/Y", $value) : '';
    } catch (Exception $ex) {
        iwitness_log_error($ex->getMessage());
        $result = '';
    }
    return $result;
}

/**
 * @return array
 */
function iwitness_get_time_zone_options()
{
    $timezones = array();
    $now = new DateTime("now", new DateTimeZone('UTC'));
    foreach (DateTimeZone::listIdentifiers() as $identifier) {
        $tmp = new DateTimeZone($identifier);
        $offset = $tmp->getOffset($now);
        $timezones[$offset] = $tmp;
    }

    ksort($timezones);
    $opts = array();
    foreach ($timezones as $timezone) {
        $offset = $timezone->getOffset($now);
        $hours = floor(abs($offset) / 3600);
        $mins = round(abs($offset) % 3600 / 60);
        $name = $timezone->getName();
        $opts[$name] = $name . ' ' . ($offset < 0 ? '-' : '+') . $hours . ':' . str_pad($mins, 2, '0');
    }

    return $opts;
}


function iwitness_display_name(array $data, $linkEmail = true)
{
    if (!empty($data['firstName']) || !empty($data['lastName'])) {
        $name = trim($data['firstName'] . ' ' . $data['lastName']);
    } else if ($data['email']) {
        $name = $data['email'];
    } else if ($data['phone']) {
        $name = '+' . $data['phone'];
    } else {
        $name = 'Unnamed';
    }

    if ($linkEmail && $data['email']) {
        $email = $data['email'];
        $name = "<a href='mailto:{$email}'>$name</a>";
    }
    return $name;
}





