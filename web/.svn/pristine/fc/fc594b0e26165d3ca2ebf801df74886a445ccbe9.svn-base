<?php

class iWitness_Access_Token
{

    /**
     * @var  string  accessToken
     */
    public $access_token;

    /**
     * @var  int  expires
     */
    public $expires;

    /**
     * @var  string  refreshToken
     */
    public $refresh_token;

    /** @var  string */
    public $token_type;

    /** @var  string */
    public $user_id;

    /** @var  string */
    public $scope;


    /**
     * Sets the token, expiry, etc values.
     *
     * @param  array $options token options
     * @return \iWitness_Access_Token
     */
    public function __construct(array $options = null)
    {
        if ($options) {
            $this->parse_from($options);
        }
    }

    /**
     * @param $options
     * @throws InvalidArgumentException
     */
    protected function parse_from($options)
    {
        if (!isset($options['access_token'])) {
            throw new \InvalidArgumentException(
                'Required option not passed: access_token' . PHP_EOL
                . print_r($options, true)
            );
        }

        $this->access_token = $options['access_token'];

        // We need to know when the token expires, add num. seconds to current time
        isset($options['expires_in']) and $this->expires = time() + ((int)$options['expires_in']);

        // Grab a refresh token so we can update access tokens when they expires
        isset($options['refresh_token']) and $this->refresh_token = $options['refresh_token'];
        isset($options['token_type']) and $this->token_type = $options['token_type'];
        isset($options['user_id']) and $this->user_id = $options['user_id'];
        isset($options['scope']) and $this->scope = $options['scope'];

    }


    /**
     * Returns the token key.
     *
     * @return string
     */
    public function __toString()
    {
        return (string)$this->access_token;
    }

    /**
     * @return array
     */
    public function get_bearer()
    {
        return array('Authorization' => 'Bearer ' . $this->access_token);
    }


    public function get_array_copy()
    {
        return array(
            "access_token" => $this->access_token,
            "expires" => $this->expires,
            "refresh_token" => $this->refresh_token,
            "token_type" => $this->token_type,
            "user_id" => $this->user_id,
            "scope" => $this->scope,
        );
    }


    /**
     * @return mixed|string|void
     */
    public function  serialize()
    {
        return json_encode($this->get_array_copy());
    }


    /**
     * @param $json
     * @return iWitness_User
     */
    public static function deserialize($json)
    {
        $data = json_decode($json, true);
        return new self($data);
    }
} 